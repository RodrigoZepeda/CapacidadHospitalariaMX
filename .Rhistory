ggplot(datos) +
geom_line(aes(x = Fecha, y = get(variable)), color = color1, size = 1) +
geom_point(aes(x = Fecha, y = get(variable)), color = color2, size = 2) +
geom_point(aes(x = Fecha, y = get(variable)), color = "white", size = 0.5) +
geom_ribbon(aes(x = Fecha, ymin = Lower, ymax = Upper), color = color1, alpha = 0.25, data = forecast) +
geom_line(aes(x = Fecha, y = Media), color = color2, size = 1, data = forecast) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
foreach(i = 1:length(clues),
.export   = c("grafica_ocupacion","datos_mx","fecha_init","fecha_finit"),
.packages = c("tidyverse","cowplot")) %dopar% {
clave          <- clues[i]
message(clave)
datos_hospital <- datos_mx %>%filter(CLUES == clave)
unidad         <- datos_hospital$`Unidad médica`[1]
estado         <- datos_hospital$Estado[1]
inst           <- datos_hospital$Institución[1]
#Bound data to logit transform
datos_modelo <- datos_hospital %>%
dplyr::select(Fecha, `Hospitalizados (%)`, `Ventilación (%)`, `UCI y Ventilación (%)`) %>%
mutate(`pHosp` = `Hospitalizados (%)`/100) %>%
mutate(`pVent` = `Ventilación (%)`/100) %>%
mutate(`pUCI` = `UCI y Ventilación (%)`/100)
datos_modelo <- datos_modelo %>%
mutate(`pHosp` = if_else(pHosp < epsilon, epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent < epsilon, epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  < epsilon, epsilon, pUCI)) %>%
mutate(`pHosp` = if_else(pHosp > 1 - epsilon, 1 - epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent > 1 - epsilon, 1 - epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  > 1 - epsilon, 1 - epsilon, pUCI))
datos_modelo <- datos_modelo %>%
mutate(logitpHosp = logit(pHosp)) %>%
mutate(logitpVent = logit(pVent)) %>%
mutate(logitpUCI = logit(pUCI))
#Create time series
dias <- seq(fecha_init, fecha_finit, by = 1)
dias <- tibble(Fecha = dias)
datos_modelo <- dias %>% left_join(datos_modelo)
hosp_arima <- autoarima(datos_modelo, "logitpHosp")
hosp_arima <- hosp_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(hosp_arima), 1))
vent_arima <- autoarima(datos_modelo, "logitpVent")
vent_arima <- vent_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(vent_arima), 1))
uci_arima  <- autoarima(datos_modelo, "logitpUCI")
uci_arima <- uci_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(uci_arima), 1))
hosp <- grafica_ocupacion_arima(datos_hospital, "Hospitalizados (%)",hosp_arima, "deepskyblue4")
vent <- grafica_ocupacion_arima(datos_hospital, "Ventilación (%)",vent_arima, "deepskyblue4")
uci  <- grafica_ocupacion_arima(datos_hospital, "UCI y Ventilación (%)",uci_arima, "deepskyblue4")
#Arreglo
plot_row <- plot_grid(hosp, vent, uci, ncol = 3)
#Título para el cowplot
title <- ggdraw() +
draw_label(
paste0(unidad, "\n(CLUES ", clave,")"),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
#Guardar plot
unidad <- str_replace_all(unidad, "[[:punct:]]", " ")
plot_grid(
title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1)
) +
ggsave(paste0("images/",unidad,".pdf"), width = 16, height = 5)
}
stopCluster(cl)
stopCluster(cl)
rm(list = ls())
setwd("~/Dropbox/HospitalizacionesCOVIDMX/")
library(tidyverse)
library(lubridate)
library(cowplot)
library(foreach)
library(parallel)
library(doParallel)
library(forecast)
epsilon = 0.001
cl <- makeCluster(max(detectCores() - 1, 1), outfile = "graficas.log")
registerDoParallel(cl)
datos_mx <- read_rds("processed/HospitalizacionesMX.rds")
datos_mx <- datos_mx %>% mutate(Fecha = ymd(Fecha))
clues       <- unique(datos_mx$CLUES)
fecha_init  <- min(datos_mx$Fecha)
fecha_finit <- max(datos_mx$Fecha)
logit          <- function(p){log(p/(1 - p))}
inverse_logit  <- function(alfa){exp(alfa)/(exp(alfa) + 1)}
autoarima      <- function(datos, variable){
serie_h  <- ts(datos[variable], start = 0)
model1   <- auto.arima(serie_h)
predicho <- forecast(model1, 30)
predicho <- tibble(Media = predicho$mean,
Upper = predicho$upper[,2],
Lower = predicho$lower[,2])
predicho <- predicho %>%
mutate(Media = inverse_logit(as.numeric(Media)),
Upper = inverse_logit(as.numeric(Upper)),
Lower = inverse_logit(as.numeric(Lower)))
predicho <- predicho %>%
mutate(Upper = if_else(Upper < epsilon, epsilon, Upper)) %>%
mutate(Lower = if_else(Lower < epsilon, 0, Lower)) %>%
mutate(Media = if_else(Media < epsilon, 0, Media)) %>%
mutate(Upper = if_else(Upper > 1 - epsilon, 1, Upper)) %>%
mutate(Lower = if_else(Lower > 1 - epsilon, 1 - epsilon, Lower)) %>%
mutate(Media = if_else(Media > 1 - epsilon, 1, Media))
predicho <- predicho %>%
mutate(Media = 100*Media) %>%
mutate(Upper = 100*Upper) %>%
mutate(Lower = 100*Lower)
return(predicho)
}
grafica_ocupacion <- function(datos, variable, color1 = "firebrick",
color2 = "black"){
ggplot(datos,
aes(x = Fecha, y = get(variable))) +
geom_line(color = color1, size = 1) +
geom_point(color = color2, size = 2) +
geom_point(color = "white", size = 0.5) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
grafica_ocupacion_arima <- function(datos, variable, forecast, color1 = "firebrick", color2 = "black"){
ggplot(datos) +
geom_line(aes(x = Fecha, y = get(variable)), color = color1, size = 1) +
geom_point(aes(x = Fecha, y = get(variable)), color = color2, size = 2) +
geom_point(aes(x = Fecha, y = get(variable)), color = "white", size = 0.5) +
geom_ribbon(aes(x = Fecha, ymin = Lower, ymax = Upper), color = color1, alpha = 0.25, data = forecast) +
geom_line(aes(x = Fecha, y = Media), color = color2, size = 1, data = forecast) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
foreach(i = 1:length(clues),
.export   = c("grafica_ocupacion_arima","datos_mx","fecha_init","fecha_finit","logit","inverse_logit"),
.packages = c("tidyverse","cowplot")) %dopar% {
clave          <- clues[i]
message(clave)
datos_hospital <- datos_mx %>%filter(CLUES == clave)
unidad         <- datos_hospital$`Unidad médica`[1]
estado         <- datos_hospital$Estado[1]
inst           <- datos_hospital$Institución[1]
#Bound data to logit transform
datos_modelo <- datos_hospital %>%
dplyr::select(Fecha, `Hospitalizados (%)`, `Ventilación (%)`, `UCI y Ventilación (%)`) %>%
mutate(`pHosp` = `Hospitalizados (%)`/100) %>%
mutate(`pVent` = `Ventilación (%)`/100) %>%
mutate(`pUCI` = `UCI y Ventilación (%)`/100)
datos_modelo <- datos_modelo %>%
mutate(`pHosp` = if_else(pHosp < epsilon, epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent < epsilon, epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  < epsilon, epsilon, pUCI)) %>%
mutate(`pHosp` = if_else(pHosp > 1 - epsilon, 1 - epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent > 1 - epsilon, 1 - epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  > 1 - epsilon, 1 - epsilon, pUCI))
datos_modelo <- datos_modelo %>%
mutate(logitpHosp = logit(pHosp)) %>%
mutate(logitpVent = logit(pVent)) %>%
mutate(logitpUCI = logit(pUCI))
#Create time series
dias <- seq(fecha_init, fecha_finit, by = 1)
dias <- tibble(Fecha = dias)
datos_modelo <- dias %>% left_join(datos_modelo)
hosp_arima <- autoarima(datos_modelo, "logitpHosp")
hosp_arima <- hosp_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(hosp_arima), 1))
vent_arima <- autoarima(datos_modelo, "logitpVent")
vent_arima <- vent_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(vent_arima), 1))
uci_arima  <- autoarima(datos_modelo, "logitpUCI")
uci_arima <- uci_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(uci_arima), 1))
hosp <- grafica_ocupacion_arima(datos_hospital, "Hospitalizados (%)",hosp_arima, "deepskyblue4")
vent <- grafica_ocupacion_arima(datos_hospital, "Ventilación (%)",vent_arima, "deepskyblue4")
uci  <- grafica_ocupacion_arima(datos_hospital, "UCI y Ventilación (%)",uci_arima, "deepskyblue4")
#Arreglo
plot_row <- plot_grid(hosp, vent, uci, ncol = 3)
#Título para el cowplot
title <- ggdraw() +
draw_label(
paste0(unidad, "\n(CLUES ", clave,")"),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
#Guardar plot
unidad <- str_replace_all(unidad, "[[:punct:]]", " ")
plot_grid(
title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1)
) +
ggsave(paste0("images/",unidad,".pdf"), width = 16, height = 5)
}
stopCluster(cl)
rm(list = ls())
setwd("~/Dropbox/HospitalizacionesCOVIDMX/")
library(tidyverse)
library(lubridate)
library(cowplot)
library(foreach)
library(parallel)
library(doParallel)
library(forecast)
epsilon = 0.001
cl <- makeCluster(max(detectCores() - 1, 1), outfile = "graficas.log")
registerDoParallel(cl)
datos_mx <- read_rds("processed/HospitalizacionesMX.rds")
datos_mx <- datos_mx %>% mutate(Fecha = ymd(Fecha))
clues       <- unique(datos_mx$CLUES)
fecha_init  <- min(datos_mx$Fecha)
fecha_finit <- max(datos_mx$Fecha)
logit          <- function(p){log(p/(1 - p))}
inverse_logit  <- function(alfa){exp(alfa)/(exp(alfa) + 1)}
autoarima      <- function(datos, variable){
serie_h  <- ts(datos[variable], start = 0)
model1   <- auto.arima(serie_h)
predicho <- forecast(model1, 30)
predicho <- tibble(Media = predicho$mean,
Upper = predicho$upper[,2],
Lower = predicho$lower[,2])
predicho <- predicho %>%
mutate(Media = inverse_logit(as.numeric(Media)),
Upper = inverse_logit(as.numeric(Upper)),
Lower = inverse_logit(as.numeric(Lower)))
predicho <- predicho %>%
mutate(Upper = if_else(Upper < epsilon, epsilon, Upper)) %>%
mutate(Lower = if_else(Lower < epsilon, 0, Lower)) %>%
mutate(Media = if_else(Media < epsilon, 0, Media)) %>%
mutate(Upper = if_else(Upper > 1 - epsilon, 1, Upper)) %>%
mutate(Lower = if_else(Lower > 1 - epsilon, 1 - epsilon, Lower)) %>%
mutate(Media = if_else(Media > 1 - epsilon, 1, Media))
predicho <- predicho %>%
mutate(Media = 100*Media) %>%
mutate(Upper = 100*Upper) %>%
mutate(Lower = 100*Lower)
return(predicho)
}
grafica_ocupacion <- function(datos, variable, color1 = "firebrick",
color2 = "black"){
ggplot(datos,
aes(x = Fecha, y = get(variable))) +
geom_line(color = color1, size = 1) +
geom_point(color = color2, size = 2) +
geom_point(color = "white", size = 0.5) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
grafica_ocupacion_arima <- function(datos, variable, forecast, color1 = "firebrick", color2 = "black"){
ggplot(datos) +
geom_line(aes(x = Fecha, y = get(variable)), color = color1, size = 1) +
geom_point(aes(x = Fecha, y = get(variable)), color = color2, size = 2) +
geom_point(aes(x = Fecha, y = get(variable)), color = "white", size = 0.5) +
geom_ribbon(aes(x = Fecha, ymin = Lower, ymax = Upper), color = color1, alpha = 0.25, data = forecast) +
geom_line(aes(x = Fecha, y = Media), color = color2, size = 1, data = forecast) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
foreach(i = 1:length(clues),
.export   = c("grafica_ocupacion_arima","datos_mx","fecha_init","fecha_finit","logit","inverse_logit"),
.packages = c("tidyverse","cowplot")) %dopar% {
clave          <- clues[i]
message(clave)
datos_hospital <- datos_mx %>%filter(CLUES == clave)
unidad         <- datos_hospital$`Unidad médica`[1]
estado         <- datos_hospital$Estado[1]
inst           <- datos_hospital$Institución[1]
#Bound data to logit transform
datos_modelo <- datos_hospital %>%
dplyr::select(Fecha, `Hospitalizados (%)`, `Ventilación (%)`, `UCI y Ventilación (%)`) %>%
mutate(`pHosp` = `Hospitalizados (%)`/100) %>%
mutate(`pVent` = `Ventilación (%)`/100) %>%
mutate(`pUCI` = `UCI y Ventilación (%)`/100)
datos_modelo <- datos_modelo %>%
mutate(`pHosp` = if_else(pHosp < epsilon, epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent < epsilon, epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  < epsilon, epsilon, pUCI)) %>%
mutate(`pHosp` = if_else(pHosp > 1 - epsilon, 1 - epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent > 1 - epsilon, 1 - epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  > 1 - epsilon, 1 - epsilon, pUCI))
datos_modelo <- datos_modelo %>%
mutate(logitpHosp = logit(pHosp)) %>%
mutate(logitpVent = logit(pVent)) %>%
mutate(logitpUCI = logit(pUCI))
#Create time series
dias <- seq(fecha_init, fecha_finit, by = 1)
dias <- tibble(Fecha = dias)
datos_modelo <- dias %>% left_join(datos_modelo)
hosp_arima <- autoarima(datos_modelo, "logitpHosp")
hosp_arima <- hosp_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(hosp_arima), 1))
vent_arima <- autoarima(datos_modelo, "logitpVent")
vent_arima <- vent_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(vent_arima), 1))
uci_arima  <- autoarima(datos_modelo, "logitpUCI")
uci_arima <- uci_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(uci_arima), 1))
hosp <- grafica_ocupacion_arima(datos_hospital, "Hospitalizados (%)",hosp_arima, "deepskyblue4")
vent <- grafica_ocupacion_arima(datos_hospital, "Ventilación (%)",vent_arima, "deepskyblue4")
uci  <- grafica_ocupacion_arima(datos_hospital, "UCI y Ventilación (%)",uci_arima, "deepskyblue4")
#Arreglo
plot_row <- plot_grid(hosp, vent, uci, ncol = 3)
#Título para el cowplot
title <- ggdraw() +
draw_label(
paste0(unidad, "\n(CLUES ", clave,")"),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
#Guardar plot
unidad <- str_replace_all(unidad, "[[:punct:]]", " ")
plot_grid(
title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1)
) +
ggsave(paste0("images/",unidad,".pdf"), width = 16, height = 5)
}
stopCluster(cl)
rm(list = ls())
setwd("~/Dropbox/HospitalizacionesCOVIDMX/")
library(tidyverse)
library(lubridate)
library(cowplot)
library(foreach)
library(parallel)
library(doParallel)
library(forecast)
epsilon = 0.001
cl <- makeCluster(max(detectCores() - 1, 1), outfile = "graficas.log")
registerDoParallel(cl)
datos_mx <- read_rds("processed/HospitalizacionesMX.rds")
datos_mx <- datos_mx %>% mutate(Fecha = ymd(Fecha))
clues       <- unique(datos_mx$CLUES)
fecha_init  <- min(datos_mx$Fecha)
fecha_finit <- max(datos_mx$Fecha)
logit          <- function(p){log(p/(1 - p))}
inverse_logit  <- function(alfa){exp(alfa)/(exp(alfa) + 1)}
autoarima      <- function(datos, variable){
serie_h  <- ts(datos[variable], start = 0)
model1   <- auto.arima(serie_h)
predicho <- forecast(model1, 30)
predicho <- tibble(Media = predicho$mean,
Upper = predicho$upper[,2],
Lower = predicho$lower[,2])
predicho <- predicho %>%
mutate(Media = inverse_logit(as.numeric(Media)),
Upper = inverse_logit(as.numeric(Upper)),
Lower = inverse_logit(as.numeric(Lower)))
predicho <- predicho %>%
mutate(Upper = if_else(Upper < epsilon, epsilon, Upper)) %>%
mutate(Lower = if_else(Lower < epsilon, 0, Lower)) %>%
mutate(Media = if_else(Media < epsilon, 0, Media)) %>%
mutate(Upper = if_else(Upper > 1 - epsilon, 1, Upper)) %>%
mutate(Lower = if_else(Lower > 1 - epsilon, 1 - epsilon, Lower)) %>%
mutate(Media = if_else(Media > 1 - epsilon, 1, Media))
predicho <- predicho %>%
mutate(Media = 100*Media) %>%
mutate(Upper = 100*Upper) %>%
mutate(Lower = 100*Lower)
return(predicho)
}
grafica_ocupacion <- function(datos, variable, color1 = "firebrick",
color2 = "black"){
ggplot(datos,
aes(x = Fecha, y = get(variable))) +
geom_line(color = color1, size = 1) +
geom_point(color = color2, size = 2) +
geom_point(color = "white", size = 0.5) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
grafica_ocupacion_arima <- function(datos, variable, forecast, color1 = "firebrick", color2 = "black"){
ggplot(datos) +
geom_line(aes(x = Fecha, y = get(variable)), color = color1, size = 1) +
geom_point(aes(x = Fecha, y = get(variable)), color = color2, size = 2) +
geom_point(aes(x = Fecha, y = get(variable)), color = "white", size = 0.5) +
geom_ribbon(aes(x = Fecha, ymin = Lower, ymax = Upper), color = color1, alpha = 0.25, data = forecast) +
geom_line(aes(x = Fecha, y = Media), color = color2, size = 1, data = forecast) +
theme_minimal() +
ylab(variable) +
coord_cartesian(ylim = c(0, 100),
xlim = c(fecha_init, fecha_finit)) +
geom_hline(aes(yintercept = 100), linetype = "dashed",
color = "gray25")
}
foreach(i = 1:length(clues),
.export   = c("grafica_ocupacion_arima","datos_mx","fecha_init","fecha_finit","logit","inverse_logit"),
.packages = c("tidyverse","cowplot","forecast")) %dopar% {
clave          <- clues[i]
message(clave)
datos_hospital <- datos_mx %>%filter(CLUES == clave)
unidad         <- datos_hospital$`Unidad médica`[1]
estado         <- datos_hospital$Estado[1]
inst           <- datos_hospital$Institución[1]
#Bound data to logit transform
datos_modelo <- datos_hospital %>%
dplyr::select(Fecha, `Hospitalizados (%)`, `Ventilación (%)`, `UCI y Ventilación (%)`) %>%
mutate(`pHosp` = `Hospitalizados (%)`/100) %>%
mutate(`pVent` = `Ventilación (%)`/100) %>%
mutate(`pUCI` = `UCI y Ventilación (%)`/100)
datos_modelo <- datos_modelo %>%
mutate(`pHosp` = if_else(pHosp < epsilon, epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent < epsilon, epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  < epsilon, epsilon, pUCI)) %>%
mutate(`pHosp` = if_else(pHosp > 1 - epsilon, 1 - epsilon, pHosp)) %>%
mutate(`pVent` = if_else(pVent > 1 - epsilon, 1 - epsilon, pVent)) %>%
mutate(`pUCI`  = if_else(pUCI  > 1 - epsilon, 1 - epsilon, pUCI))
datos_modelo <- datos_modelo %>%
mutate(logitpHosp = logit(pHosp)) %>%
mutate(logitpVent = logit(pVent)) %>%
mutate(logitpUCI = logit(pUCI))
#Create time series
dias <- seq(fecha_init, fecha_finit, by = 1)
dias <- tibble(Fecha = dias)
datos_modelo <- dias %>% left_join(datos_modelo)
hosp_arima <- autoarima(datos_modelo, "logitpHosp")
hosp_arima <- hosp_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(hosp_arima), 1))
vent_arima <- autoarima(datos_modelo, "logitpVent")
vent_arima <- vent_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(vent_arima), 1))
uci_arima  <- autoarima(datos_modelo, "logitpUCI")
uci_arima <- uci_arima %>%
mutate(Fecha = seq(fecha_finit + 1, fecha_finit + nrow(uci_arima), 1))
hosp <- grafica_ocupacion_arima(datos_hospital, "Hospitalizados (%)",hosp_arima, "deepskyblue4")
vent <- grafica_ocupacion_arima(datos_hospital, "Ventilación (%)",vent_arima, "deepskyblue4")
uci  <- grafica_ocupacion_arima(datos_hospital, "UCI y Ventilación (%)",uci_arima, "deepskyblue4")
#Arreglo
plot_row <- plot_grid(hosp, vent, uci, ncol = 3)
#Título para el cowplot
title <- ggdraw() +
draw_label(
paste0(unidad, "\n(CLUES ", clave,")"),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
#Guardar plot
unidad <- str_replace_all(unidad, "[[:punct:]]", " ")
plot_grid(
title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1)
) +
ggsave(paste0("images/",unidad,".pdf"), width = 16, height = 5)
}
stopCluster(cl)
clave <- 145424
poblacion <- data.frame(
x = rnorm(1000),
y = rgamma(1000, 1/clave, 10/clave)
)
View(poblacion)
poblacion <- data.frame(
x = rnorm(1000),
y = sample(c("A","B","C"), c(0.5, 1/clave, 1 - (0.5 + 1/clave))
)
View(poblacion)
View(poblacion)
poblacion <- data.frame(
x = rnorm(1000),
y = sample(c("A","B","C"), 1000, c(0.5, 1/clave, 1 - (0.5 + 1/clave),
replace = T)
)
View(poblacion)
View(poblacion)
poblacion <- data.frame(
x = rnorm(1000),
y = sample(c("A","B","C"), 1000, c(0.5, 1/clave, 1 - (0.5 + 1/clave)),
replace = T)
)
View(poblacion)
